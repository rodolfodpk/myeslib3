/*
 * This file is generated by jOOQ.
*/
package example1.datamodel.tables;


import example1.datamodel.Example1db;
import example1.datamodel.Keys;
import example1.datamodel.tables.records.IdempotencyRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Idempotency extends TableImpl<IdempotencyRecord> {

    private static final long serialVersionUID = 451506255;

    /**
     * The reference instance of <code>example1db.idempotency</code>
     */
    public static final Idempotency IDEMPOTENCY = new Idempotency();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IdempotencyRecord> getRecordType() {
        return IdempotencyRecord.class;
    }

    /**
     * The column <code>example1db.idempotency.partition_name</code>.
     */
    public final TableField<IdempotencyRecord, String> PARTITION_NAME = createField("partition_name", org.jooq.impl.SQLDataType.VARCHAR.length(36).nullable(false), this, "");

    /**
     * The column <code>example1db.idempotency.slot_id</code>.
     */
    public final TableField<IdempotencyRecord, String> SLOT_ID = createField("slot_id", org.jooq.impl.SQLDataType.VARCHAR.length(36).nullable(false), this, "");

    /**
     * The column <code>example1db.idempotency.inserted_on</code>.
     */
    public final TableField<IdempotencyRecord, Timestamp> INSERTED_ON = createField("inserted_on", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>example1db.idempotency</code> table reference
     */
    public Idempotency() {
        this("idempotency", null);
    }

    /**
     * Create an aliased <code>example1db.idempotency</code> table reference
     */
    public Idempotency(String alias) {
        this(alias, IDEMPOTENCY);
    }

    private Idempotency(String alias, Table<IdempotencyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Idempotency(String alias, Table<IdempotencyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Example1db.EXAMPLE1DB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<IdempotencyRecord> getPrimaryKey() {
        return Keys.KEY_IDEMPOTENCY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<IdempotencyRecord>> getKeys() {
        return Arrays.<UniqueKey<IdempotencyRecord>>asList(Keys.KEY_IDEMPOTENCY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Idempotency as(String alias) {
        return new Idempotency(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Idempotency rename(String name) {
        return new Idempotency(name, null);
    }
}
